# -*- coding: utf-8 -*-
"""soft voting.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1h0kxO2L_BuZzuVppKFVYwYyhuhqxpC8D
"""

# 감정반응 적용 유 EDA predict 불러오기
EDA_pred_bf = pd.read_csv('C:/Users/user/Desktop/model/sv/XGBClassifier_y_pred_bf86_cv10.csv')

# 감정반응 적용 유 text predict 불러오기
text_pred_bf = pd.read_csv('C:/Users/user/Desktop/model/sv/text_predictions.csv')

# 감정반응 적용 무 음성 predict 불러오기
audio_pred_af = pd.read_csv('C:/Users/user/Desktop/model/sv/voice_predictions.csv')

# 감정반응 적용 무 EDA predict 불러오기
EDA_pred_af = pd.read_csv('C:/Users/user/Desktop/model/sv/XGBClassifier_y_pred_cut86_cv10.csv')

# 감정반응 적용 무 text predict 불러오기
text_pred_af = pd.read_csv('C:/Users/user/Desktop/model/sv/text_predictions_무.csv')

# 감정반응 적용 무 text + audio acc
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_af * weights[0] + audio_pred_af * weights[1]) / sum(weights)
    
    return weighted_f1
text_pred_af = 0.669
audio_pred_af = 0.461

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.2]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_af, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 유 text + audio acc 
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_bf * weights[0] + audio_pred_af * weights[1]) / sum(weights)
    
    return weighted_f1
text_pred_bf = 0.769
audio_pred_af = 0.461

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.2]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_bf, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 무 text + EDA + audio acc
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, model3_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_af * weights[0] + EDA_pred_af * weights[1] + audio_pred_af * weights[2]) / sum(weights)
    
    return weighted_f1
text_pred_af = 0.669
EDA_pred_af = 0.396
audio_pred_af = 0.461

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.15, 0.05]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_af, EDA_pred_af, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 유 text + EDA + audio acc
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, model3_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_bf * weights[0] + EDA_pred_bf * weights[1] + audio_pred_af * weights[2]) / sum(weights)
    
    return weighted_f1
text_pred_bf = 0.769
EDA_pred_bf = 0.398
audio_pred_af = 0.461

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.15, 0.05]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_bf, EDA_pred_bf, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 무 text + audio F1
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_af * weights[0]  + audio_pred_af * weights[1]) / sum(weights)
    
    return weighted_f1
text_pred_af = 0.505
audio_pred_af = 0.316

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8,  0.2]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_af, EDA_pred_af, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 무 text + EDA + audio F1
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, model3_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_bf * weights[0] + EDA_pred_bf * weights[1] + audio_pred_af * weights[2]) / sum(weights)
    
    return weighted_f1
text_pred_bf = 0.505
EDA_pred_bf = 0.396
audio_pred_af = 0.316

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.15, 0.05]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_bf, EDA_pred_bf, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 DB text + audio F1
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_af * weights[0] + audio_pred_af * weights[1]) / sum(weights)
    
    return weighted_f1
text_pred_af = 0.606
audio_pred_af = 0.316

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.2]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_af, EDA_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)

# 감정반응 적용 유 text + EDA + audio F1
from sklearn.metrics import f1_score

def soft_voting_f1(model1_f1, model2_f1, model3_f1, weights):
    # 각 모델의 f1 점수에 가중치를 곱한 후, 모든 가중치의 합으로 나누어 가중 평균 계산
    weighted_f1 = (text_pred_bf * weights[0] + EDA_pred_bf * weights[1] + audio_pred_af * weights[2]) / sum(weights)
    
    return weighted_f1
text_pred_bf = 0.606
EDA_pred_bf = 0.398
audio_pred_af = 0.316

# 각 모델의 f1 점수에 대한 가중치 지정 (합은 1이 되도록 설정)
weights = [0.8, 0.15, 0.05]


# 소프트 보팅의 최종 예측값 계산
soft_voting_f1_score = soft_voting_f1(text_pred_bf, EDA_pred_bf, audio_pred_af, weights)
print("Soft Voting F1 Score:", soft_voting_f1_score)